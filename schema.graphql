enum BadgeStatus {
  Requested
  Approved
  Challenged
  RequestRemoval
  Removed
}

enum KlerosRequestType {
  Registration # Identifies a request to register an item to the registry.
  Clearing # Identifies a request to remove an item from the registry.
}

enum Controller {
  kleros
}

## - BADGE TYPE

type BadgeModel @entity {
  id: ID! # BadgeType id
  uri: String!
  controllerType: String!
  validFor: BigInt!
  creatorFee: BigInt!
  paused: Boolean!
  creator: User!
  badgesMintedAmount: BigInt!

  badgeModelKleros: BadgeModelKlerosMetadata @derivedFrom(field: "badgeModelId")
  mintedBadges: [Badge!]! @derivedFrom(field: "badgeModel")
}

type BadgeModelKlerosMetadata @entity {
  id: ID!
  badgeModelId: BadgeModel!
  registrationUri: String!
  removalUri: String!
  tcrList: Bytes!
  submissionBaseDeposit: BigInt!
  challengePeriodDuration: BigInt!
  #TODO: set governor, arbitrator, etc
}

# type KlerosBadgeModelArbitrationParams @entity {
#   id: ID! # badgeModel-index
# }

## - BADGE

type Badge @entity {
  id: ID!
  badgeModel: BadgeModel!
  uri: String!
  account: User! # The receiver of the badge
  status: BadgeStatus!
  validFor: BigInt!

  badgeKlerosMetadata: BadgeKlerosMetadata @derivedFrom(field: "badge")
}

type BadgeKlerosMetadata @entity {
  id: ID! # the same as ID as the BADGE
  badge: Badge!
  itemID: Bytes!
  reviewDueDate: BigInt! # The timestamp when the review period ends. if zero, it does not have review period
  # requests: [KlerosBadgeRequest!]!
  requests: KlerosBadgeRequest @derivedFrom(field: "badgeKlerosMetadata")
}

type KlerosBadgeRequest @entity {
  id: ID! # TODO: for now, it will be badgeModel-address-requestIndex, will be migrated later to badgeID.
  badgeKlerosMetadata: BadgeKlerosMetadata!
  requestIndex: BigInt!
  type: KlerosRequestType!
  submissionTime: BigInt!
  arbitrationParamsIndex: BigInt!
  requester: Bytes!
  challenger: Bytes
}

## - USER

type User @entity {
  id: ID!
  badges: [Badge!] @derivedFrom(field: "account") # TODO: check how to handle different types of badges
  mintedBadgesAmount: BigInt!
  # creator
  isCreator: Boolean!
  isVerified: Boolean!
  createdBadgeModels: [BadgeModel!] @derivedFrom(field: "creator")
  creatorUri: String
  createdBadgesModelAmount: BigInt!
}
